# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master, devel ]
  pull_request:
    branches: [ master, devel ]

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.7", "3.8", "3.9"]
        qt5: [true, false]
        gdal: [true, false]
        seisunix: [true, false]
        exclude:
          - gdal: true
            python-version: "3.9"  # This is broken on pip at gdal@3.0.4
          - os: macos-latest
            qt5: true
          - os: macos-latest
            seisunix: true
          - os: macos-latest
            gdal: true
          - os: windows-latest
            qt5: true
          - os: windows-latest
            seisunix: true
          - os: windows-latest
            gdal: true
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # testing
        python -m pip install flake8 pytest
        python -m pip install coverage
        python -m pip install mock
        # production
        pip install -r requirements.txt

    - name: Install optional dependency qt5
      if: ${{ matrix.qt5 }}
      run: |
        sudo apt install -y xvfb x11-utils libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 pyqt5-dev-tools
        python -m pip install pyqt5
        python -c 'import PyQt5'

    - name: Install optional dependency SeisUnix
      if: ${{ matrix.seisunix }}
      run: bash install_su.sh

    - name: Install optional dependency GDAL
      if: ${{ matrix.gdal }}
      run: |
        sudo apt-get install libgdal-dev=3.0.4+dfsg-1build3
        export CPLUS_INCLUDE_PATH=/usr/include/gdal
        export C_INCLUDE_PATH=/usr/include/gdal
        python -m pip install gdal==3.0.4

    - name: Install ImpDAR
      run: python -m pip install .

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests GUI
      if: ${{ matrix.qt5 }}
      run: |
        xvfb-run `which coverage` run --source impdar --omit=impdar/tests/*,impdar/lib/ApresData/*,impdar/lib/analysis/* -m pytest 

    - name: Run tests no GUI
      if: ${{ !matrix.qt5 }}
      run: |
        coverage run --source impdar --omit=impdar/tests/*,impdar/lib/ApresData/*,impdar/lib/analysis/* -m pytest 

    - name: Produce xml coverage
      run: coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        fail_ci_if_error: false  # I see no reason to fail over this.

  Mac-Build:
    runs-on: macos-latest
    needs: Test
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Symlink gcc
        run: |
            ln -s /usr/local/bin/gfortran-9 /usr/local/bin/gfortran
            ln -s /usr/local/bin/gcc-9 /usr/local/bin/gcc
        continue-on-error: true
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel cython
          python -m pip install -r requirements.txt
      - name: create wheel distribution
        run: python -m pip wheel -w dist/ .;
      - name: upload source distribution
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload --repository testpypi dist/*
        continue-on-error: true
      - name: upload source distribution
        if: startsWith(github.ref, 'refs/tags')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload dist/*

  Linux-build:
    runs-on: ubuntu-latest
    needs: Test
    if: startsWith(github.ref, 'refs/tags')
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build and deploy manylinux wheels
        uses: ./
        continue-on-error: true

  # deploy source distribution
  Source-dist:
    runs-on: ubuntu-latest
    needs: Test
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
      - name: create source distribution
        run: python setup.py sdist
      - name: upload source distribution
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload --repository testpypi dist/*
        continue-on-error: true
      - name: upload source distribution
        if: startsWith(github.ref, 'refs/tags')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload dist/*
        continue-on-error: true
